#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoord;
layout(location = 2) in vec3 normal;

uniform mat4 ProjectionMat;
uniform mat4 TransformationMat;
uniform mat4 ViewMat;

uniform vec3 lightPosition;

out vec2 outTexCoord;
out vec3 surfaceNormal;
out vec3 toLightVector;

void main(){
    vec4 WorldPosition = TransformationMat * vec4(position,1);
    gl_Position = ProjectionMat*ViewMat*WorldPosition;

    outTexCoord = texCoord;
    surfaceNormal = (TransformationMat*vec4(normal,0.0)).xyz;

    toLightVector = lightPosition - WorldPosition.xyz;

}
!end here!
#version 330 core

in vec2 outTexCoord;
in vec3 surfaceNormal;
in vec3 toLightVector;

uniform vec3 lightColor;

uniform float lightIntensity;

out vec4 FragColor;

uniform sampler2D ourTexture;

void main(){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float nDot1 = dot(unitNormal,unitLightVector);
    float brightness = max(nDot1,0.2) * lightIntensity;
    vec3 diffuse = brightness * lightColor;

    FragColor = vec4(diffuse,1.0) * texture(ourTexture,outTexCoord);
    //FragColor = vec4(diffuse,1.0) + texture(ourTexture,outTexCoord);
    //FragColor = vec4(1,0,0,1);
}